let items = [];
let logoImage = null;
let selectedCurrency = 'USD';
let currencySymbols = {
    'USD': '$',
    'EUR': '€', 
    'INR': '₹', 
    'GBP': '£',
    'JPY': '¥',
    'CAD': '$',
    'AUD': '$'
};

function updateCurrency() {
    selectedCurrency = document.getElementById('currencySelect').value;
    renderItems();
    updatePreview();
}

function handleLogoUpload(event) {
    const file = event.target.files[0];
    if (file) {
        const reader = new FileReader();
        reader.onload = function(e) {
            logoImage = e.target.result;
            const preview = document.getElementById('logoPreview');
            const previewInvoice = document.getElementById('logoPreviewInvoice');
            preview.src = logoImage;
            previewInvoice.src = logoImage;
            preview.style.display = 'block';
            previewInvoice.style.display = 'block';
        }
        reader.readAsDataURL(file);
    }
}

function updateTaxAndTotal() {
    const taxRate = parseFloat(document.getElementById('taxRate').value) || 0;
    const subtotal = calculateSubtotal();
    const tax = (subtotal * taxRate / 100).toFixed(2);
    const total = (parseFloat(subtotal) + parseFloat(tax)).toFixed(2);
    
    document.getElementById('subtotalAmount').textContent = `${currencySymbols[selectedCurrency]}${subtotal}`;
    document.getElementById('taxAmount').textContent = `${currencySymbols[selectedCurrency]}${tax}`;
    document.getElementById('totalAmount').textContent = `${currencySymbols[selectedCurrency]}${total}`;
}

// Set default date for issue date
document.addEventListener('DOMContentLoaded', function() {
    const today = new Date().toISOString().split('T')[0];
    document.getElementById('issueDate').value = today;
});

document.getElementById('addItemButton').addEventListener('click', addItem);
addItem();

document.getElementById('previewButton').addEventListener('click', updatePreview);

function generatePDF() {
    const { jsPDF } = window.jspdf;
    const doc = new jsPDF();

    // Define colors (matching the website's scheme)
    const primaryColor = [17, 17, 17]; // #111111
    const secondaryColor = [102, 102, 102]; // #666666
    const accentColor = [221, 221, 221]; // #dddddd

    // Set document properties
    doc.setProperties({
        title: 'Invoice',
        subject: 'Invoice generated using Free Invoice Generator',
        author: 'Free Invoice Generator',
        keywords: 'invoice, free, generator',
        creator: 'Free Invoice Generator'
    });

    // Add logo if exists
    if (logoImage) {
        const img = new Image();
        img.src = logoImage;
        const aspectRatio = img.width / img.height;
        const maxWidth = 40;
        const maxHeight = 20;
        let width = maxWidth;
        let height = width / aspectRatio;
        
        if (height > maxHeight) {
            height = maxHeight;
            width = height * aspectRatio;
        }
        
        doc.addImage(logoImage, 'JPEG', 15, 15, width, height);
    }

    // Add invoice title and branding
    doc.setFontSize(28);
    doc.setTextColor(primaryColor[0], primaryColor[1], primaryColor[2]);
    doc.setFont("helvetica", "bold");
    doc.text("INVOICE", 200, 25, null, null, "right");
    
    doc.setFontSize(10);
    doc.setTextColor(secondaryColor[0], secondaryColor[1], secondaryColor[2]);
    doc.setFont("helvetica", "normal");
    doc.text("Generated by Free Invoice Generator", 200, 32, null, null, "right");
    doc.setTextColor(accentColor[0], accentColor[1], accentColor[2]);
    doc.text("https://freeinvoicegenerator.com", 200, 37, null, null, "right");

    // Add horizontal line
    doc.setDrawColor(accentColor[0], accentColor[1], accentColor[2]);
    doc.setLineWidth(0.5);
    doc.line(15, 42, 195, 42);

    // Reset text color
    doc.setTextColor(0, 0, 0);

    // Add invoice details
    doc.setFontSize(10);
    doc.setTextColor(secondaryColor[0], secondaryColor[1], secondaryColor[2]);
    doc.text(`Invoice Number: ${document.getElementById('invoiceNumber').value}`, 15, 50);
    doc.text(`PO Number: ${document.getElementById('poNumber').value}`, 15, 56);
    doc.text(`Issue Date: ${document.getElementById('issueDate').value}`, 15, 62);
    doc.text(`Due Date: ${document.getElementById('dueDate').value}`, 15, 68);

    // Add billing info
    doc.setFontSize(12);
    doc.setFont("helvetica", "bold");
    doc.setTextColor(primaryColor[0], primaryColor[1], primaryColor[2]);
    doc.text("From:", 15, 80);
    doc.text("Bill To:", 105, 80);

    doc.setFont("helvetica", "normal");
    doc.setFontSize(10);
    doc.setTextColor(0, 0, 0);
    const fromName = document.getElementById('fromName').value || '';
    const fromAddress = document.getElementById('fromAddress').value || '';
    const fromEmail = document.getElementById('fromEmail').value || '';
    const fromPhone = document.getElementById('fromPhone').value || '';

    doc.text(fromName, 15, 87);
    doc.text(fromAddress.split('\n'), 15, 93);
    doc.text(fromEmail, 15, 108);
    doc.text(fromPhone, 15, 114);

    const toName = document.getElementById('toName').value || '';
    const toAddress = document.getElementById('toAddress').value || '';
    const toEmail = document.getElementById('toEmail').value || '';

    doc.text(toName, 105, 87);
    doc.text(toAddress.split('\n'), 105, 93);
    doc.text(toEmail, 105, 108);

    // Add items table
    const headers = [["Description", "Quantity", "Unit Price", "Total"]];
    const data = items.map(item => [
        item.description,
        item.quantity,
        `${currencySymbols[selectedCurrency]}${item.price}`,
        `${currencySymbols[selectedCurrency]}${item.total}`
    ]);

    doc.autoTable({
        startY: 125,
        head: headers,
        body: data,
        theme: 'striped',
        headStyles: { 
            fillColor: primaryColor,
            textColor: [255, 255, 255],
            fontSize: 11,
            fontStyle: 'bold',
            halign: 'left'
        },
        styles: { 
            fontSize: 10,
            cellPadding: 5,
        },
        columnStyles: {
            0: { cellWidth: 'auto' },
            1: { cellWidth: 30, halign: 'center' },
            2: { cellWidth: 40, halign: 'right' },
            3: { cellWidth: 40, halign: 'right' }
        },
        alternateRowStyles: {
            fillColor: [250, 250, 250]
        },
    });

    // Add totals
    const finalY = doc.lastAutoTable.finalY + 10;
    const taxRate = parseFloat(document.getElementById('taxRate').value) || 0;
    const subtotal = calculateSubtotal();
    const tax = (subtotal * taxRate / 100).toFixed(2);
    const total = (parseFloat(subtotal) + parseFloat(tax)).toFixed(2);

    doc.setFontSize(10);
    doc.setTextColor(secondaryColor[0], secondaryColor[1], secondaryColor[2]);
    doc.text("Subtotal:", 140, finalY);
    doc.text(`Tax (${taxRate}%):`, 140, finalY + 7);
    doc.setFont("helvetica", "bold");
    doc.setTextColor(primaryColor[0], primaryColor[1], primaryColor[2]);
    doc.text("Total:", 140, finalY + 14);

    doc.setFont("helvetica", "normal");
    doc.setTextColor(0, 0, 0);
    doc.text(`${currencySymbols[selectedCurrency]}${subtotal}`, 195, finalY, null, null, "right");
    doc.text(`${currencySymbols[selectedCurrency]}${tax}`, 195, finalY + 7, null, null, "right");
    doc.setFont("helvetica", "bold");
    doc.setFontSize(12);
    doc.setTextColor(primaryColor[0], primaryColor[1], primaryColor[2]);
    doc.text(`${currencySymbols[selectedCurrency]}${total}`, 195, finalY + 14, null, null, "right");

    // Add terms
    const termsUrl = document.getElementById('termsConditions').value;
    if (termsUrl) {
        doc.setFont("helvetica", "bold");
        doc.setFontSize(11);
        doc.setTextColor(primaryColor[0], primaryColor[1], primaryColor[2]);
        doc.text("Terms & Conditions:", 15, finalY + 30);
        doc.setFont("helvetica", "normal");
        doc.setFontSize(10);
        doc.setTextColor(0, 0, 255);
        doc.textWithLink("View Terms & Conditions", 15, finalY + 37, { url: termsUrl });
    }

    // Add thank you note
    doc.setTextColor(primaryColor[0], primaryColor[1], primaryColor[2]);
    doc.setFont("helvetica", "italic");
    doc.setFontSize(12);
    doc.text("Thank you for your business!", 105, finalY + 45, null, null, "center");

    // Add footer with branding
    doc.setFontSize(8);
    doc.setTextColor(secondaryColor[0], secondaryColor[1], secondaryColor[2]);
    doc.text("Generated using Free Invoice Generator", 105, 285, null, null, "center");
    doc.setTextColor(accentColor[0], accentColor[1], accentColor[2]);
    doc.text("https://freeinvoicegenerator.com", 105, 290, null, null, "center");

    // Save PDF
    doc.save('invoice.pdf');
}

function updatePreview() {
    document.getElementById('datePreview').textContent = document.getElementById('issueDate').value;
    
    document.getElementById('fromNamePreview').textContent = document.getElementById('fromName').value || '';
    document.getElementById('fromAddressPreview').textContent = document.getElementById('fromAddress').value || '';
    document.getElementById('fromEmailPreview').textContent = document.getElementById('fromEmail').value || '';
    document.getElementById('fromPhonePreview').textContent = document.getElementById('fromPhone').value || '';
    
    document.getElementById('toNamePreview').textContent = document.getElementById('toName').value || '';
    document.getElementById('toAddressPreview').textContent = document.getElementById('toAddress').value || '';
    document.getElementById('toEmailPreview').textContent = document.getElementById('toEmail').value || '';
    
    const itemsPreview = document.getElementById('itemsPreview');
    itemsPreview.innerHTML = '';
    items.forEach(item => {
        const tr = document.createElement('tr');
        tr.innerHTML = `
            <td>${item.description || ''}</td>
            <td>${item.quantity || '0'}</td>
            <td>${currencySymbols[selectedCurrency]}${item.price || '0.00'}</td>
            <td>${currencySymbols[selectedCurrency]}${item.total}</td>
        `;
        itemsPreview.appendChild(tr);
    });
    
    const taxRate = parseFloat(document.getElementById('taxRate').value) || 0;
    const subtotal = calculateSubtotal();
    const tax = (subtotal * taxRate / 100).toFixed(2);
    const total = (parseFloat(subtotal) + parseFloat(tax)).toFixed(2);
    
    document.getElementById('subtotalPreview').textContent = `${currencySymbols[selectedCurrency]}${subtotal}`;
    document.getElementById('taxPreview').textContent = `${currencySymbols[selectedCurrency]}${tax}`;
    document.getElementById('totalPreview').textContent = `${currencySymbols[selectedCurrency]}${total}`;
    
    const termsUrl = document.getElementById('termsConditions').value;
    document.getElementById('termsPreview').innerHTML = termsUrl ? `<a href="${termsUrl}" target="_blank">View Terms & Conditions</a>` : '';
    
    document.getElementById('invoicePreview').style.display = 'block';
    document.getElementById('invoicePreview').scrollIntoView({ behavior: 'smooth' });
}

document.getElementById('fromPhone').addEventListener('input',  function(e) {
    let input = e.target;
    let value = input.value;
    value = value.replace(/[^\d+]/g, '');
    if (value.lastIndexOf('+') > 0) {
        value = value.slice(0, value.lastIndexOf('+')) + value.slice(value.lastIndexOf('+') + 1);
    }
    if (value.length > 12) {
        value = value.slice(0, 15);
    }
    input.value = value;
});

function addItem() {
    const item = { description: '', price: '', quantity: '', total: '0.00' };
    items.push(item);
    renderItems();
}

function removeItem(index) {
    items.splice(index, 1);
    if (items.length === 0) {
        addItem();
    }
    renderItems();
}

function updateItem(index, field, value) {
    items[index][field] = value;
    if (field === 'price' || field === 'quantity') {
        const price = parseFloat(items[index].price) || 0;
        const quantity = parseFloat(items[index].quantity) || 0;
        items[index].total = (price * quantity).toFixed(2);
    }
    renderItems();
}

function calculateSubtotal() {
    return items.reduce((sum, item) => sum + (parseFloat(item.total) || 0), 0).toFixed(2);
}

function sanitizeInput(input) {
    return input.replace(/</g, "&lt;").replace(/>/g, "&gt;");
}

function renderItems() {
    const tbody = document.getElementById('itemsTableBody');
    tbody.innerHTML = '';
    items.forEach((item, index) => {
        const tr = document.createElement('tr');
        tr.innerHTML = `
            <td><input type="text" class="table-input" value="${sanitizeInput(item.description)}" onchange="updateItem(${index}, 'description', this.value)" placeholder="Description"></td>
            <td><input type="number" class="table-input" value="${sanitizeInput(item.price)}" onchange="updateItem(${index}, 'price', this.value)" placeholder="${currencySymbols[selectedCurrency]}0.00"></td>
            <td><input type="number" class="table-input" value="${sanitizeInput(item.quantity)}" onchange="updateItem(${index}, 'quantity', this.value)" placeholder="0"></td>
            <td>${currencySymbols[selectedCurrency]}${item.total}</td>
            <td><button class="delete-button" onclick="removeItem(${index})">🗑️</button></td>
        `;
        tbody.appendChild(tr);
    });
    updateTaxAndTotal();
}

document.addEventListener('DOMContentLoaded', function() {
    // Initialize ad containers
    const adSpaces = document.querySelectorAll('.ad-space');
    
    // Function to check if element is in viewport
    function isInViewport(element) {
        const rect = element.getBoundingClientRect();
        return (
            rect.top >= 0 &&
            rect.left >= 0 &&
            rect.bottom <= (window.innerHeight || document.documentElement.clientHeight) &&
            rect.right <= (window.innerWidth || document.documentElement.clientWidth)
        );
    }

    // Lazy load ads when they come into view
    function lazyLoadAds() {
        adSpaces.forEach(adSpace => {
            if (isInViewport(adSpace) && !adSpace.hasAttribute('data-loaded')) {
                adSpace.setAttribute('data-loaded', 'true');
                
                // Here you would normally initialize your Google Ad
                // Example Google AdSense code:
                /*
                (adsbygoogle = window.adsbygoogle || []).push({});
                */
            }
        });
    }

    // Listen for scroll and resize events
    ['scroll', 'resize'].forEach(evt => 
        window.addEventListener(evt, lazyLoadAds, { passive: true })
    );

    // Initial check
    lazyLoadAds();
});

// Ad refresh management
setInterval(() => {
    if (typeof adsbygoogle !== 'undefined') {
        document.querySelectorAll('.ad-space[data-loaded="true"]').forEach(adSpace => {
            if (isInViewport(adSpace)) {
                // Refresh visible ads
                // Implementation depends on your ad network
            }
        });
    }
}, 30000); // Refresh every 30 seconds

document.addEventListener('DOMContentLoaded', function() {
    const menuToggle = document.querySelector('.menu-toggle');
    const navMenu = document.querySelector('.nav-menu');
    
    menuToggle.addEventListener('click', function() {
        navMenu.classList.toggle('active');
    });

    // Close menu when clicking outside
    document.addEventListener('click', function(e) {
        if (!e.target.closest('.nav-container')) {
            navMenu.classList.remove('active');
        }
    });
});